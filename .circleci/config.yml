version: 2.1

orbs:
  vr: kohirens/version-release@4.4.4
  aws: circleci/aws-cli@5.1.2

parameters:
  ctx_ci_cd:
    default: kohirens-automation
    description: Secrets context
    type: string
  ctx_dockerhub:
    default: kohirens-automation-dockerhub
    description: Secrets context
    type: string
  ctx_iac_test:
      default: kohirens-iac-test
      description: Secrets context
      type: string
  ssh_finger:
    description: SSH fingerprint.
    type: string
    default: "6a:92:a1:b6:8f:5c:93:7a:cd:63:f1:49:bc:ba:33:80"
  triggered_flow:
    default: "workflow-selector"
    description: Workflow to be executed.
    type: string
  aws_iac_role:
    default: arn:aws:iam::755285156183:role/circleci-terraform-pipelines
    description: CircleCI AWS IAC role.
    type: string

filter-semantic-tag: &filter-semantic-tag
  tags:
    only: /^v?\d+\.\d+\.\d+$/
  branches:
    ignore: /.*/

executors:
  kohirens-go:
    docker:
      - image: kohirens/circleci-go:0.4.2
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}

  aws-tf:
    docker:
      - image: kohirens/circleci-aws-iac-tf:0.2.0
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}

  terraform:
    docker:
      - image: hashicorp/terraform:1.10.2
        auth:
         username: ${DH_USER}
         password: ${DH_PASS}

commands:
    aws-oidc-setup:
        description: Setup AWS auth using OIDC token
        parameters:
            role_arn:
                type: string
            session_duration:
                default: 3600
                type: integer
        steps:
            - run:
                  name: Get AWS credentials
                  command: |
                      set -- $(aws sts assume-role-with-web-identity --role-arn << parameters.role_arn >> --role-session-name "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}" --web-identity-token "${CIRCLE_OIDC_TOKEN}" --duration-seconds << parameters.session_duration >> --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
                      aws_key="${1}" && shift
                      aws_secret="${1}" && shift
                      aws_token="${1}" && shift
                      mkdir -p ~/.aws
                      echo '[default]' > ~/.aws/credentials
                      echo "aws_access_key_id=${aws_key}" >> ~/.aws/credentials
                      echo "aws_secret_access_key=${aws_secret}" >> ~/.aws/credentials
                      echo "aws_session_token=${aws_token}" >> ~/.aws/credentials
                      if [ -f ~/.aws/credentials ]; then
                          echo "credentials retrieved"
                          exit 0
                      fi
                      echo "could not retrieve credentials"
                      exit 1
            - run:
                  name: Verify AWS credentials
                  command: |
                      aws sts get-caller-identity

jobs:
  run-tf-test:
    executor: terraform
    steps:
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.ssh_finger >>
      - run:
           name: Check Terraform module formatting
           command: terraform fmt -check -write=false -diff
      - aws/install
      - aws-oidc-setup:
            role_arn: << pipeline.parameters.aws_iac_role >>
      - run:
          name: Run Terraform tests
          command: |
              apk add zip jq
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ls -la files/wait-for-dns-resolve.sh
              chmod +x files/wait-for-dns-resolve.sh
              terraform init
              terraform validate
              terraform test -verbose

  run-test-n-build:
    executor: kohirens-go
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.ssh_finger >>
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "app/go.mod" }}
      - run:
          environment:
              CGO_ENABLED: 0
          name: Run Go test
          command: |
              cd app
              go mod tidy
              go test -v ./...
      - save_cache:
          key: go-mod-v1-{{ checksum "app/go.mod" }}
          paths:
            - "/home/circleci/go/pkg/mod"
      - run:
          environment:
            CGO_ENABLED: 0
          name: Build lambda ZIP package
          command: |
              apk add zip jq
              cd app
              directory="./cmd/bootstrap"
              go generate "${directory}"
              # New AWS Lambda Go requires executable to be named "bootstrap".
              # Also remove the RPC dependency.
              # see https://aws.amazon.com/blogs/compute/migrating-aws-lambda-functions-from-the-go1-x-runtime-to-the-custom-runtime-on-amazon-linux-2/#Removing%20the%20RPC%20dependency
              GOARCH="arm64" GOOS="linux" go build -tags "lambda.norpc" "${directory}"
              chmod 0755 bootstrap
              zip -r "bootstrap.zip" bootstrap
      - persist_to_workspace:
          root: .
          paths: [ . ]

  publish-lambda-zip:
    parameters:
      semver:
        default: ""
        type: string
    executor: kohirens-go
    steps:
        - checkout
        - run:
            environment:
              CGO_ENABLED: 0
            name: "Build lambda ZIP package"
            command: |
              SEMVER="<< parameters.semver >>"
              if [ -z "${SEMVER}"]; then
                echo "missing semantic version number."
                exit 1
              fi
              echo "Publishing tag ${SEMVER}"
              cd app
              directory="./cmd/bootstrap"
              go generate "${directory}"
              # New AWS Lambda Go requires executable to be named "bootstrap".
              # Also remove the RPC dependency.
              # see https://aws.amazon.com/blogs/compute/migrating-aws-lambda-functions-from-the-go1-x-runtime-to-the-custom-runtime-on-amazon-linux-2/#Removing%20the%20RPC%20dependency
              GOARCH="arm64" GOOS="linux" go build -tags "lambda.norpc" "${directory}"
              zip -r "bootstrap.zip" bootstrap
              gh config set git_protocol ssh --host github.com
              gh auth status --hostname github.com
              echo "uploading bootstrap.zip"
              gh release upload "${SEMVER}" "bootstrap.zip"

workflows:
  quality_checks:
    jobs:
      - run-test-n-build:
          context:
             - << pipeline.parameters.ctx_dockerhub >>
          filters: { branches: { ignore: /main|auto-update-changelog/ } }
      - run-tf-test:
          context:
            - << pipeline.parameters.ctx_dockerhub >>
            - << pipeline.parameters.ctx_iac_test >>
          requires: [ run-test-n-build ]

  workflow-selector:
    when:
      and:
        - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
        - vr/workflow-selector:
            context: << pipeline.parameters.ctx_ci_cd >>
            ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-changelog:
    when:
      and:
        - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
    jobs:
        - vr/publish-changelog:
            context: << pipeline.parameters.ctx_ci_cd >>
            ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-release-tag:
    when:
      and:
        - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
    jobs:
        - vr/tag-and-release:
            context: << pipeline.parameters.ctx_ci_cd >>

  on-tag-release:
    jobs:
      - publish-lambda-zip:
          semver: "<< pipeline.git.tag >>"
          context:
            - << pipeline.parameters.ctx_ci_cd >>
          filters:
            <<: *filter-semantic-tag
